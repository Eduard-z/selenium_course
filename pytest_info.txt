PyTest: правила запуска тестов:
* если мы не передали никакого аргумента в команду, а написали просто pytest, тест-раннер начнёт поиск в текущей директории;

* как аргумент можно передать файл, путь к директории или любую комбинацию директорий и файлов, например: 

	pytest scripts/selenium_scripts
	# найти все тесты в директории scripts/selenium_scripts

	pytest test_user_interface.py
	# найти и выполнить все тесты в файле 

	pytest scripts/drafts.py::test_register_new_user_parametrized
	# найти тест с именем test_register_new_user_parametrized в указанном файле в указанной директории и выполнить 

* дальше происходит рекурсивный поиск: то есть PyTest обойдет все вложенные директории;

* во всех директориях PyTest ищет файлы, которые удовлетворяют правилу  test_*.py или *_test.py (то есть начинаются на test_ или заканчиваются _test и имеют расширение .py);

* внутри всех этих файлов находит тестовые функции по следующему правилу:

	* все тесты, название которых начинается с test, которые находятся вне классов;
	* все тесты, название которых начинается с test внутри классов, имя которых начинается с Test (и без метода __init__ внутри класса).

Если запустить PyTest с параметром -v (verbose, то есть подробный), то в отчёт добавится дополнительная информация со списком тестов и статусом их прохождения.

Если нужно проверить, что тест вызывает ожидаемое исключение, мы можем использовать специальную конструкцию with pytest.raises().


Классические фикстуры (fixtures):
Фикстуры в контексте PyTest — это вспомогательные функции для наших тестов, которые не являются частью тестового сценария.
Финализаторы — закрываем браузер:
Один из вариантов финализатора — использование ключевого слова Python: yield.

Для фикстур можно задавать область покрытия фикстур. Допустимые значения: “function”, “class”, “module”, “session”.
При описании фикстуры можно указать дополнительный параметр autouse=True, который укажет, что фикстуру нужно запустить для каждого теста даже без явного вызова.


Маркировка тестов
Для выборочного запуска таких тестов в PyTest используется маркировка тестов или метки (marks). Для маркировки теста нужно написать декоратор вида @pytest.mark.mark_name, где mark_name - произвольная строка.
Так же можно маркировать целый тестовый класс.

Как же регистрировать метки?
Создайте файл pytest.ini в корневой директории вашего тестового проекта и добавьте в файл следующие строки:

[pytest]
markers =
    smoke: marker for smoke tests
    regression: marker for regression tests
Текст после знака ":" является поясняющим - его можно не писать.

Инверсия
Чтобы запустить все тесты, не имеющие заданную маркировку, можно использовать инверсию. Для запуска всех тестов, не отмеченных как smoke, нужно выполнить команду: "not smoke".

Объединение тестов с разными маркировками
Для запуска тестов с разными метками можно использовать логическое ИЛИ. Запустим smoke и regression-тесты: "smoke or regression".

Выбор тестов, имеющих несколько маркировок
Чтобы запустить только smoke-тесты для Windows 10, нужно использовать логическое И: "smoke and win10".

Пропуск тестов
Итак, чтобы пропустить тест, его отмечают в коде как @pytest.mark.skip.

Отметить тест как падающий
Добавим маркировку @pytest.mark.xfail для падающего теста.

Когда баг починят, мы это узнаем, ﻿﻿так как теперь тест будет отмечен как XPASS (“unexpectedly passing” - неожиданно проходит). После этого маркировку xfail для теста можно удалить. Кстати, к маркировке xfail можно добавлять параметр reason:

	@pytest.mark.xfail(reason="fixing this bug right now")
Чтобы увидеть это сообщение в консоли, при запуске нужно добавлять параметр pytest -rx.


Параметризация тестов
PyTest позволяет запустить один и тот же тест с разными входными параметрами. 
Для этого используется декоратор @pytest.mark.parametrize().
В @pytest.mark.parametrize() нужно передать параметр, который должен изменяться, и список значений параметра. В самом тесте наш параметр тоже нужно передавать в качестве аргумента. Обратите внимание, что внутри декоратора имя параметра оборачивается в кавычки (касается только строковых значений), а в списке аргументов теста кавычки не нужны.
	@pytest.mark.parametrize('language', ["ru", "en-gb"])
	def test_guest_should_see_login_link(browser, language):
		link = f"http://selenium1py.pythonanywhere.com/{language}/"
		browser.get(link)
	
Можно задавать параметризацию также для всего тестового класса, чтобы все тесты в классе запустились с заданными параметрами. 


Conftest.py - конфигурация тестов
Для хранения часто употребимых фикстур и хранения глобальных настроек нужно использовать файл conftest.py, который должен лежать в директории верхнего уровня в вашем проекте с тестами. Можно создавать дополнительные файлы conftest.py в других директориях, но тогда настройки в этих файлах будут применяться только к тестам в под-директориях.

conftest.py:

import pytest
from selenium import webdriver

@pytest.fixture(scope="function")
def browser():
    print("\nstart browser for test..")
    browser = webdriver.Chrome()
    yield browser
    print("\nquit browser..")
    browser.quit()
	
	
test_conftest.py:

link = "http://selenium1py.pythonanywhere.com/"

def test_guest_should_see_login_link(browser):
    browser.get(link)
    browser.find_element_by_css_selector("#login_link")
	

Установка Firefox и Selenium-драйвера geckodriver
Запускать тесты такой командой: pytest -s -v --browser_name=firefox test_cmd.py

В файле с тестом понадобилось:
1) добавить параметр request в функцию browser
2) прописать browser_name = request.config.getoption("browser_name") 
3) написать условие, в котором, при browser_name == "firefox" запускать нужный браузер.

Conftest.py и передача параметров в командной строке
Это делается с помощью встроенной функции pytest_addoption и фикстуры request. Сначала добавляем в файле conftest обработчик опции в функции pytest_addoption, затем напишем фикстуру, которая будет обрабатывать переданные в опции данные:

conftest.py:

import pytest
from selenium import webdriver

def pytest_addoption(parser):
    parser.addoption('--browser_name', action='store', default=None,
                     help="Choose browser: chrome or firefox")


@pytest.fixture(scope="function")
def browser(request):
    browser_name = request.config.getoption("browser_name")
    browser = None
    if browser_name == "chrome":
        print("\nstart chrome browser for test..")
        browser = webdriver.Chrome()
    elif browser_name == "firefox":
        print("\nstart firefox browser for test..")
        browser = webdriver.Firefox()
    else:
        raise pytest.UsageError("--browser_name should be chrome or firefox")
    yield browser
    print("\nquit browser..")
    browser.quit()

	
test_parser.py:

link = "http://selenium1py.pythonanywhere.com/"

def test_guest_should_see_login_link(browser):
    browser.get(link)
    browser.find_element_by_css_selector("#login_link")
	
Можно задать значение параметра по умолчанию, чтобы в командной строке не обязательно было указывать параметр --browser_name, например, так:

parser.addoption('--browser_name', action='store', default="chrome",
                 help="Choose browser: chrome or firefox")
Давайте укажем параметр:

pytest -s -v --browser_name=chrome test_parser.py
А теперь запустим тесты на Firefox:

pytest -s -v --browser_name=firefox test_parser.py
Вы должны увидеть, как сначала тесты запустятся в браузере Chrome, а затем -- в Firefox.


Плагины и перезапуск тестов
pip install pytest-rerunfailures

Чтобы указать количество перезапусков для каждого из упавших тестов, нужно добавить в командную строку параметр: 
"--reruns n", где n - это количество перезапусков. 
Если при повторных запусках тесты пройдут успешно, то и прогон тестов будет считаться успешным.
Дополнительно мы указали параметр "--tb=line", чтобы сократить лог с результатами теста:

pytest -v --tb=line --reruns 1 --browser_name=chrome test_rerun.py
